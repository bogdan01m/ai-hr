
import chainlit as cl
from typing import Optional
from pathlib import Path
from src.hr_agent.agent import agent
from src.shared.schemas import ProfileContext
from src.shared.chat_history import ChatHistoryManager
from src.shared.pdf_processor import PDFProcessor
from src.shared.logger_config import (
    setup_logfire,
    log_user_message,
    log_agent_response,
    log_database_operation,
    log_pdf_operation
)
from src.auth import auth_manager
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è logfire
setup_logfire()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Chainlit SQLAlchemy data layer –¥–ª—è —Å–µ—Å—Å–∏–π
@cl.data_layer
def get_data_layer():
    from chainlit.data.sql_alchemy import SQLAlchemyDataLayer
    from src.shared.database_url import get_database_url

    conninfo = get_database_url()
    return SQLAlchemyDataLayer(conninfo=conninfo)

@cl.password_auth_callback
def auth_callback(username: str, password: str) -> Optional[cl.User]:
    """Callback –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Chainlit"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not username or not password:
        return None

    if len(username.strip()) == 0 or len(password.strip()) == 0:
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    if len(password) < 4:
        return None

    return auth_manager.authenticate(username.strip(), password.strip())

@cl.on_chat_start
async def start():
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏
    profile_context = ProfileContext()
    cl.user_session.set("profile_context", profile_context)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_manager = ChatHistoryManager()
    cl.user_session.set("chat_manager", chat_manager)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    cl.user_session.set("message_history", [])

    welcome_message = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

üìé **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**: –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–æ 100,000 —Ç–æ–∫–µ–Ω–æ–≤) –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±–∏–∑–Ω–µ—Å–∞ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.

–ú—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π–¥–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤:
1. **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏** - –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –∏ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
2. **Hard Skills** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
3. **Soft Skills** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
4. **–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã** - —Ñ–æ—Ä–º–∞—Ç, –∑–∞—Ä–ø–ª–∞—Ç–∞, –±–µ–Ω–µ—Ñ–∏—Ç—ã

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã –∏—â–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""

    await cl.Message(content=welcome_message).send()



@cl.on_message
async def main(message: cl.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    profile_context = cl.user_session.get("profile_context")
    chat_manager = cl.user_session.get("chat_manager")

    if profile_context is None:
        profile_context = ProfileContext()
        cl.user_session.set("profile_context", profile_context)

    if chat_manager is None:
        chat_manager = ChatHistoryManager()
        cl.user_session.set("chat_manager", chat_manager)

    # –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è Chainlit
    session_id = cl.context.session.id

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    pdf_status_message = None
    if message.elements:
        for element in message.elements:
            if isinstance(element, cl.File) and element.name.lower().endswith('.pdf'):
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                    pdf_processor = PDFProcessor()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
                    pdf_path = Path(element.path)
                    text_content, status_message = pdf_processor.process_pdf(pdf_path)

                    if text_content:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
                        profile_context.company_info_pdf = text_content
                        cl.user_session.set("profile_context", profile_context)

                        log_pdf_operation(
                            "file_uploaded",
                            success=True,
                            pdf_path=str(pdf_path),
                            session_id=session_id
                        )

                        pdf_status_message = f"‚úÖ {status_message}"
                    else:
                        log_pdf_operation(
                            "file_uploaded",
                            success=False,
                            pdf_path=str(pdf_path),
                            error=status_message,
                            session_id=session_id
                        )

                        pdf_status_message = f"‚ùå {status_message}"

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
                    log_pdf_operation(
                        "file_uploaded",
                        success=False,
                        pdf_path=element.path,
                        error=error_msg,
                        session_id=session_id
                    )

                    pdf_status_message = f"‚ùå {error_msg}"

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_user_message(
        session_id=session_id,
        message=message.content,
        profile_context=profile_context.model_dump() if profile_context else None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    message_with_history = await chat_manager.format_history_for_agent(
        session_id=session_id,
        current_message=message.content,
        profile_context=profile_context
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ user_session –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Chainlit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ UI)
    message_history = cl.user_session.get("message_history", [])
    message_history.append({
        "type": "user",
        "content": message.content,
        "timestamp": None
    })
    cl.user_session.set("message_history", message_history)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
    result = await agent.run(
        message_with_history,
        deps=profile_context
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    log_agent_response(
        session_id=session_id,
        response=result.output,
        profile_context=profile_context.model_dump() if profile_context else None
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ user_session –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Chainlit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ UI)
    message_history = cl.user_session.get("message_history", [])
    message_history.append({
        "type": "assistant",
        "content": result.output,
        "timestamp": None
    })
    cl.user_session.set("message_history", message_history)

    # –û–±–Ω–æ–≤–ª—è–µ–º ProfileContext –≤ user session (–±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω Chainlit)
    await chat_manager.update_profile_context(profile_context)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF –∫ –æ—Ç–≤–µ—Ç—É –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª
    final_response = result.output
    if pdf_status_message:
        final_response = f"{pdf_status_message}\n\n{result.output}"

    await cl.Message(content=final_response).send()

from chainlit.types import ThreadDict

@cl.on_chat_resume
async def on_chat_resume(thread: ThreadDict):
    print("The user resumed a previous chat session!")

    # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ thread
    session_id = thread["id"]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_manager = ChatHistoryManager()
    cl.user_session.set("chat_manager", chat_manager)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ThreadDict (Chainlit's built-in persistence)
    message_history = []
    if "steps" in thread:
        for step in sorted(thread["steps"], key=lambda x: x.get("createdAt", "")):
            if step.get("type") == "user_message" and step.get("input"):
                message_history.append({
                    "type": "user",
                    "content": step["input"],
                    "timestamp": step.get("createdAt")
                })
            elif step.get("type") == "assistant_message" and step.get("output"):
                message_history.append({
                    "type": "assistant",
                    "content": step["output"],
                    "timestamp": step.get("createdAt")
                })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ user_session –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º
    cl.user_session.set("message_history", message_history)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö thread
    profile_context = await chat_manager.profile_saver.get_profile_context(session_id)

    if profile_context:
        cl.user_session.set("profile_context", profile_context)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from src.shared.logger_config import log_database_operation
        log_database_operation("restore_profile_context", session_id, True)

        print(f"Restored profile context for session {session_id}")
        print(f"Current stage: {profile_context.current_stage}")
        print(f"Profile completion: {profile_context.get_completion_percentage():.1f}%")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        profile_context = ProfileContext()
        cl.user_session.set("profile_context", profile_context)
        print(f"Created new profile context for session {session_id}")

    print(f"Restored {len(message_history)} messages from chat history")

@cl.on_chat_end
def on_chat_end():
    print("The user disconnected!")
