
import chainlit as cl
from hr_agent import agent
from schemas import ProfileContext
from chat_history import ChatHistoryManager
from logger_config import (
    setup_logfire,
    log_user_message,
    log_agent_response,
    log_database_operation
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è logfire
setup_logfire()

@cl.on_chat_start
async def start():
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏
    profile_context = ProfileContext()
    cl.user_session.set("profile_context", profile_context)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_manager = ChatHistoryManager()
    cl.user_session.set("chat_manager", chat_manager)

    welcome_message = """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

–ú—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π–¥–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤:
1. **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏** - –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –∏ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
2. **Hard Skills** - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
3. **Soft Skills** - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
4. **–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã** - —Ñ–æ—Ä–º–∞—Ç, –∑–∞—Ä–ø–ª–∞—Ç–∞, –±–µ–Ω–µ—Ñ–∏—Ç—ã

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ù–∞ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã –∏—â–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."""

    await cl.Message(content=welcome_message).send()

@cl.on_message
async def main(message: cl.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    profile_context = cl.user_session.get("profile_context")
    chat_manager = cl.user_session.get("chat_manager")

    if profile_context is None:
        profile_context = ProfileContext()
        cl.user_session.set("profile_context", profile_context)

    if chat_manager is None:
        chat_manager = ChatHistoryManager()
        cl.user_session.set("chat_manager", chat_manager)

    # –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è Chainlit
    session_id = cl.context.session.id

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_user_message(
        session_id=session_id,
        message=message.content,
        profile_context=profile_context.model_dump() if profile_context else None
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        chat_manager.save_message(
            session_id=session_id,
            message_type="user",
            content=message.content,
            profile_context=profile_context
        )
        log_database_operation("save_user_message", session_id, True)
    except Exception as e:
        log_database_operation("save_user_message", session_id, False, str(e))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    message_with_history = chat_manager.format_history_for_agent(
        session_id=session_id,
        current_message=message.content
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
    result = agent.run_sync(
        message_with_history,
        deps=profile_context
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    log_agent_response(
        session_id=session_id,
        response=result.output,
        profile_context=profile_context.model_dump() if profile_context else None
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    try:
        chat_manager.save_message(
            session_id=session_id,
            message_type="assistant",
            content=result.output,
            profile_context=profile_context
        )
        log_database_operation("save_agent_response", session_id, True)
    except Exception as e:
        log_database_operation("save_agent_response", session_id, False, str(e))

    await cl.Message(content=result.output).send()
